version: "3.5"

services:
  postgres:
    image: postgres:14.5
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "users"
    volumes:
      - project:/var/lib/postgresql/data
      - ./src/main/resources/sql-script/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
    networks:
      - users
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  users:
    container_name: users
    build:
      context: .
      dockerfile: Dockerfile
    image: users:latest
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      DATABASESERVER_PORT: "5432"
    depends_on:
      - postgres
      - broker
    networks:
      - users
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka
  broker:
    image: confluentinc/cp-server:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka
networks:
  kafka:
    name: network_name
  users:
    name: network_name
volumes:
  project:
    driver: local
  pgadmin-data:
    driver: local